Complete All Courses With Dependencies

A certain university has n courses to offer and to graduate from that university, a student must complete all of the courses. Some of the courses have a set of prerequisite courses. One can take a course only after completing all of its prerequisites. Dependencies between the courses are described by two arrays a and b of the same size: course a[i] must be taken before course b[i] for all valid indices. Is it possible to complete all the courses without violating constraints?

Example One

Input: n = 4, a = [1, 1, 3], b = [0, 2, 1]

Output: true 

One possible ordering is 3, 1, 0, 2.

Example Two

Input: n = 4, a = [1, 1, 3, 0], b = [0, 2, 1, 3]

Output: false

Every possible ordering of the courses violates at least one of the constraints.


// Complete the function below
func can_be_completed(n int32, a []int32, b []int32) bool {
    // Init for visited, in and out times
    visited := make([]bool, n)
    in := make([]int, n)
    out := make([]int, n)
    
    // Build graph
    adjList := buildGraph(n, a, b)
    
    // Outer loop: For all unvisted vertices
    var time int
    for node := int32(0); node < n; node++ {
        if visited[node] { continue }
        
        // Trigger DFS if node is not visited
        // check if loop is detected.
        cycle := dfs(node, adjList, visited, &time, in, out)
        
        // Return false in loop detected scenario
        if cycle { return false }
    }
        
    // Return true in other cases
    return true
}

func buildGraph(n int32, a, b []int32) [][]int32 {
    adjList := make([][]int32, n)
    
    for idx, src := range a {
        dst := b[idx]
        adjList[src] = append(adjList[src], dst)
    }
    
    return adjList
}

func dfs(node int32, adjList [][]int32, visited []bool, time *int, in []int, out []int) bool {
    visited[node] = true
    *time += 1
    in[node] = *time
    
    for _, neighbor := range adjList[node] {
        if !visited[neighbor] {
            if dfs(neighbor, adjList, visited, time, in, out) {
                return true
            }
        } else {
            if out[neighbor] == 0 {
                // Back edge
                return true
            }
        }
    }
    
    *time += 1
    out[node] = *time
    return false
}
