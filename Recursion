Possible To Achieve Target Sum?



Given a set of integers and a target value k, find a non-empty subset that sums up to k.



Example One

Input: [2 4 8], k = 6

Output: True

Because 2+4=6.



Example Two

Input: [2 4 6], k = 5

Output: False

Because no subset of numbers from the input sums up to 5.



Notes

Input Parameters: Function has two arguments: an array of integers (their order doesnâ€™t matter) and the target value  k.



Output: Function must return a boolean value.



Constraints:

1 <= size of the input array <= 18
-10^12 <= elements of the array, k <= 10^12


Custom Input

Input Format: First line of input contains integer n, size of arr. Next n lines contain integer elements of arr. Next line contains integer k. If arr = [2, 4, 8] and k = 6, custom input would be:

3

2

4

8

6



Output Format: Valid output consists of a single character on a single line: 0 for False or 1 for True. For input arr = [2, 4, 8] and k = 6, correct output would be:

1




func check_if_sum_possible_utils(arr []int64, index int, sum int64, k int64) bool {

//    if sum == k {
//        return true
//    } 

    if index == len(arr) {
        return false
    }
    
    if sum + arr[index] == k {
        return true
    }

    return check_if_sum_possible_utils(arr, index+1, sum, k) ||
           check_if_sum_possible_utils(arr, index+1, sum+arr[index], k)
    
}

func check_if_sum_possible(arr []int64, k int64) bool {
    
    if len(arr) == 0 {
        return false   
    }

    return check_if_sum_possible_utils(arr, 0, 0, k)
}


