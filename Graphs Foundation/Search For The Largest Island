Search For The Largest Island

Given a two-dimensional array containing 0s and 1s, find the size of the largest island. If there is no island return 0.

An island is a group of 1s connected vertically or horizontally.

Example One

Input: grid = [

	[1, 1, 0],

	[1, 1, 0],

	[0, 0, 1],

]

Output: 4

There are two islands:

1) [(0, 0), (0, 1), (1, 0), (1, 1)]

2) [(2, 2)]

The size of the largest island is 4.


func max_island_size(grid [][]int32) int32 {
    // Init visited grid
    visited := make([][]bool, len(grid))
    for row, _ := range visited {
        visited[row] = make([]bool, len(grid[0]))
    }
    
    // Build graph
    adjList := [][]int{{-1,0},{0,1},{1,0},{0,-1}}
    
    // Outer loop: for each cell in matrix
    maxNodes := int32(0)
    for row, cols := range grid {
        for col, value := range cols {
            // if cell value is 1 and not visited
            if value != 1 || visited[row][col] {
                visited[row][col] = true
                continue
            }
            
            // Invoke BFS and get number of visited nodes in component
            nodes := bfs(grid, adjList, []int{row, col}, visited)
            
            // Update max nodes if returned value is greater
            if nodes > maxNodes {
                maxNodes = nodes
            }
        }
    }
            
    // return max nodes in a component
    return maxNodes
}

func bfs(grid [][]int32, adjList [][]int, cell []int, visited [][]bool) int32 {
    // Init queue with given cell
    var qu [][]int
    
    qu = append(qu, cell)
    
    // mark it visited
    visited[cell[0]][cell[1]] = true
    
    // init max nodes to 1
    maxNodes := int32(1)
    
    // for each node in queue
    for len(qu) > 0 {
    
        // deque node
        node := qu[0]
        qu = qu[1:]
        
        // for each of its neighbors
        for _, neighbor := range adjList {
            row, col := node[0]+neighbor[0], node[1]+neighbor[1]
            // if its valid, not visited and is 1 
            if isValid(row, col, len(grid), len(grid[0])) && !visited[row][col] &&
                grid[row][col] == 1 {
            
                // enqueue to queue
                // update visited and increment max_nodes
                qu = append(qu, []int{row, col})
                visited[row][col] = true
                maxNodes += 1
            }
            
            // ignroe otherwise
        }
    }
            
    return maxNodes
}

func isValid(row, col, rows, cols int) bool {
    if row >= 0 && row < rows && col >= 0 && col < cols {
        return true
    }
    return false
}
